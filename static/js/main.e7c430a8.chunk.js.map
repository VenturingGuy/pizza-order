{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PIZZA_TOPPINGS","App","useState","name","setName","map","toppings","setToppings","ToppingCheckbox","props","label","toppingChange","index","type","checked","onChange","ToppingCheckboxes","_","indexer","renderToppingCheckbox","changeToppings","toppingsCopy","outputToppings","className","placeholder","value","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAIMA,EAAiB,CAAC,YAAa,UAAW,UAAW,SAAU,aAsEtDC,MApEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAASF,EAAeK,KAAI,kBAAM,MAFrD,mBAENC,EAFM,KAEIC,EAFJ,KAOPC,EAAkB,SAACC,GAAW,IAC3BN,EAAqCM,EAArCN,KAAMO,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,cAAeC,EAASH,EAATG,MACnC,OACI,kCACI,uBACIC,KAAK,WACLV,KAAMA,EACNW,QAASR,EAASM,GAClBG,SAAUJ,IAEjBD,MAaDM,EAAoBhB,EAAeK,KAAI,SAACY,EAAGL,GAK7C,OAd0B,SAACT,EAAMO,EAAOC,EAAeO,GAA7B,OAC1B,cAACV,EAAD,CACIL,KAAMA,EACNO,MAAOA,EACPC,cAAeA,EACfC,MAAOM,IASJC,CAJI,UACC,GAAD,OAAInB,EAAeY,KAER,kBAAMQ,EAAeR,KAD7BA,MAKZQ,EAAiB,SAACR,GACtB,IAAMS,EAAY,YAAOf,GACzBe,EAAaT,IAAUS,EAAaT,GACpCL,EAAYc,IAGRC,EAAetB,EAAeK,KAAI,SAACY,EAAGL,GAC1C,OAAO,4BAAIN,EAASM,GAASZ,EAAeY,GAAS,UAIvD,OACE,qBAAKW,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACA,6CACA,uBACIC,YAAY,OACZC,MAAOtB,EACPY,SAAU,SAAAW,GAAC,OAAItB,EAAQsB,EAAEC,OAAOF,UAEpC,qBAAKF,UAAU,oBAAf,SAAoCP,IACpC,wBAAQH,KAAK,SAAb,oBACA,4CACA,6BAAKV,IACL,qBAAKoB,UAAU,gBAAf,SAAgCD,UCxDzBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e7c430a8.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from \"react\";\n\n\nconst PIZZA_TOPPINGS = ['Pepperoni', 'Sausage', 'Peppers', 'Onions', 'Pineapple']\n\nfunction App() {\n  const [name, setName] = useState('')\n  const [toppings, setToppings] = useState(PIZZA_TOPPINGS.map(() => false))\n  // Define list of toppings\n  // Make function to output individual inputs\n    // checkmark input type, name, checked or not?\n    // call function on check\n  const ToppingCheckbox = (props) => {\n    const {name, label, toppingChange, index} = props\n    return (\n        <label>\n            <input\n                type=\"checkbox\"\n                name={name}\n                checked={toppings[index]}\n                onChange={toppingChange}\n            />\n        {label}</label>\n    )}\n  // Make function to render input component\n    // name and checkmark\n  const renderToppingCheckbox = (name, label, toppingChange, indexer) => (\n      <ToppingCheckbox\n          name={name}\n          label={label}\n          toppingChange={toppingChange}\n          index={indexer}\n      />\n  )\n  // Make function to render an input component for every topping defined in the list\n  const ToppingCheckboxes = PIZZA_TOPPINGS.map((_, index) => {\n      const name=\"topping\"\n      const label=`${PIZZA_TOPPINGS[index]}`\n      const indexer=index\n      const toppingChange = () => changeToppings(index)\n      return renderToppingCheckbox(name, label, toppingChange, indexer)\n  })\n\n  const changeToppings = (index) => {\n    const toppingsCopy = [...toppings]\n    toppingsCopy[index] = !toppingsCopy[index]\n    setToppings(toppingsCopy)\n  }\n\n  const outputToppings=PIZZA_TOPPINGS.map((_, index) => {\n    return <p>{toppings[index] ? PIZZA_TOPPINGS[index] : null}</p>\n  })\n  \n\n  return (\n    <div className=\"App\">\n        <div className=\"userOrder\">\n        <h1>Pizza Order</h1>\n        <input\n            placeholder=\"Name\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n        />\n        <div className=\"toppingSelections\">{ToppingCheckboxes}</div>\n        <button type=\"submit\">Submit</button>\n        <h1>Your Order</h1>\n        <h2>{name}</h2>\n        <div className=\"toppingOutput\">{outputToppings}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}